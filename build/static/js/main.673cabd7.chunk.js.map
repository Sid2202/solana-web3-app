{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.673cabd7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\n\nconst App = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  const [like, setLike] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n  const { solana } = window;\n\n  if (solana) {\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  }\n};\n\nconst sendGif = async () => {\n  if (inputValue.length === 0) {\n    console.log(\"No gif link given!\")\n    return\n  }\n  setInputValue('');\n  console.log('Gif link:', inputValue);\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n\n    await program.rpc.addGif(inputValue, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    console.log(\"GIF successfully sent to program\", inputValue)\n\n    await getGifList();\n  } catch (error) {\n    console.log(\"Error sending GIF:\", error)\n  }\n};\n\n// const likeCount = (event) => {\n//     setLike(like+1);\n// }\n\n\nconst onInputChange = (event) => {\n  const { value } = event.target;\n  setInputValue(value);\n};\nconst getProvider = () => {\n  const connection = new Connection(network, opts.preflightCommitment);\n  const provider = new Provider(\n    connection, window.solana, opts.preflightCommitment,\n  );\n\treturn provider;\n}\n\nconst createGifAccount = async () => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"ping\")\n    await program.rpc.startStuffOff({\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      },\n      signers: [baseAccount]\n    });\n    console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n    await getGifList();\n\n  } catch(error) {\n    console.log(\"Error creating BaseAccount account:\", error)\n  }\n}\n\n  \n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Post a link of your creation here!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  \n                  <img src={item.gifLink} alt=\"post\"/>\n                  <h3>By {walletAddress}</h3>\n                    {/* <button onClick={likeCount}>{like}</button> */}\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n  // UseEffects\nuseEffect(() => {\n  const onLoad = async () => {\n    await checkIfWalletIsConnected();\n  };\n  window.addEventListener('load', onLoad);\n  return () => window.removeEventListener('load', onLoad);\n}, []);\n\nconst getGifList = async() => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList)\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n}\n\nuseEffect(() => {\n  if (walletAddress) {\n    console.log('Fetching GIF list...');\n    getGifList()\n  }\n}, [walletAddress]);\n\n  return (\n  <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n        <p className=\"header\">Solanagram</p>\n        <p className=\"sub-text\">\n          ðŸŒˆJump into the metaverse of creators!ðŸŒ \n        </p>\n        {!walletAddress && renderNotConnectedContainer()}\n        {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n      </div>\n        \n      <div className=\"footer-container\">\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n        <a\n          className=\"footer-text\"\n          href={TWITTER_LINK}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >{`built on @${TWITTER_HANDLE}`}</a>\n      </div>\n    </div>\n  </div>\n);\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}